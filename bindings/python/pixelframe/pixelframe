#!/usr/bin/env python

import argparse
import sys
import os
import json
import time
import redis
import time
from pprint import pprint
from collections import deque

from rgbmatrix import RGBMatrix, RGBMatrixOptions

class PixelFrame():
    def __init__(self, *args, **kwargs):

        self.parser = argparse.ArgumentParser()

        self.parser.add_argument("-r", "--led-rows", action="store", help="Display rows. 16 for 16x32, 32 for 32x32. Default: 32", default=32, type=int)
        self.parser.add_argument("-c", "--led-chain", action="store", help="Daisy-chained boards. Default: 1.", default=1, type=int)
        self.parser.add_argument("-P", "--led-parallel", action="store", help="For Plus-models or RPi2: parallel chains. 1..3. Default: 1", default=1, type=int)
        self.parser.add_argument("-p", "--led-pwm-bits", action="store", help="Bits used for PWM. Something between 1..11. Default: 11", default=11, type=int)
        self.parser.add_argument("-b", "--led-brightness", action="store", help="Sets brightness level. Default: 100. Range: 1..100", default=100, type=int)
        self.parser.add_argument("-m", "--led-gpio-mapping", help="Hardware Mapping: regular, adafruit-hat, adafruit-hat-pwm" , choices=['regular', 'adafruit-hat', 'adafruit-hat-pwm'], type=str)
        self.parser.add_argument("--led-scan-mode", action="store", help="Progressive or interlaced scan. 0 Progressive, 1 Interlaced (default)", default=1, choices=range(2), type=int)
        self.parser.add_argument("--led-pwm-lsb-nanoseconds", action="store", help="Base time-unit for the on-time in the lowest significant bit in nanoseconds. Default: 130", default=130, type=int)
        self.parser.add_argument("--led-show-refresh", action="store_true", help="Shows the current refresh rate of the LED panel")
        self.parser.add_argument("--led-slowdown-gpio", action="store", help="Slow down writing to GPIO. Range: 1..100. Default: 1", choices=range(3), type=int)
        self.parser.add_argument("--led-no-hardware-pulse", action="store", help="Don't use hardware pin-pulse generation")
        self.parser.add_argument("--led-rgb-sequence", action="store", help="Switch if your matrix has led colors swapped. Default: RGB", default="RGB", type=str)


        self.default_fps = 2
        self.brightness = 50
        self.art_dir = "/home/senglert/pixelart/"
        self.gallery_dir = "gallery/" # Relative to art dir
        self.default_duration = 60
        self.default_file = "art.json"
        self.art_queue = deque([])

    def usleep(self, value):
        time.sleep(value / 1000000.0)

    def process(self):
        self.args = self.parser.parse_args()

        options = RGBMatrixOptions()

        if self.args.led_gpio_mapping != None:
          options.hardware_mapping = self.args.led_gpio_mapping
        options.rows = self.args.led_rows
        options.chain_length = self.args.led_chain
        options.parallel = self.args.led_parallel
        options.pwm_bits = self.args.led_pwm_bits
        options.brightness = self.args.led_brightness
        options.pwm_lsb_nanoseconds = self.args.led_pwm_lsb_nanoseconds
        options.led_rgb_sequence = self.args.led_rgb_sequence
        if self.args.led_show_refresh:
          options.show_refresh_rate = 1

        if self.args.led_slowdown_gpio != None:
            options.gpio_slowdown = self.args.led_slowdown_gpio
        if self.args.led_no_hardware_pulse:
          options.disable_hardware_pulsing = True

        self.matrix = RGBMatrix(options = options)

        try:
            # Start loop
            print("Press CTRL-C to stop sample")
            self.run()
        except KeyboardInterrupt:
            print("Exiting\n")
            sys.exit(0)

        return True

    def run(self):

        self.matrix.brightness = self.brightness

        r = redis.Redis(host='localhost');
        timeout = None
        fps = 1
        frames = []

        self.loadGalleryArt()

        while True:

            if ((time.time() > timeout) or (timeout is None) or (r.get('PIXELFRAME_INTERRUPT'))):
                picture = r.get('PIXELFRAME_NEXT') or r.get('PIXELFRAME_DEFAULT') or self.getNextFromGallery() or self.default_file
                r.delete('PIXELFRAME_NEXT')
                r.delete('PIXELFRAME_INTERRUPT')
                with open(self.art_dir + picture) as data_file:
                    data = json.load(data_file)

                fps = data['fps'] or self.default_fps
                frames = data['frames']
                seconds = int(r.get('PIXELFRAME_NEXT_TIMEOUT') or r.get('PIXELFRAME_DEFAULT_TIMEOUT') or self.default_duration)
                timeout = time.time() + seconds
                r.delete('PIXELFRAME_NEXT_TIMEOUT')

                print(picture + " for " + str(seconds) + " seconds");

            frame = frames.pop(0)
            newFrame = list(frame)
            self.showFrame(frame, fps)
            frames.append(newFrame)

    def loadGalleryArt(self):
        for file in os.listdir(self.art_dir + self.gallery_dir):
            if file.endswith(".json"):
                self.art_queue.append(file)

    def getNextFromGallery(self):

        if (len(self.art_queue) == 0):
            return None

        # Get next
        next = self.art_queue.popleft()

        # Return to end of line
        self.art_queue.append(next)

        return self.gallery_dir + next;

    def showFrame(self, frame, fps):

        for r in range (32):
            for c in range(32):
                if frame:
                    color = frame.pop(0)

                    rColor = (color      ) & 0xff
                    gColor = (color >> 8 ) & 0xff
                    bColor = (color >> 16) & 0xff

                    self.matrix.SetPixel(c,r,rColor, gColor, bColor);

        time.sleep((1.0 / fps))

# Main function
if __name__ == "__main__":
    pixelframe = PixelFrame()
    if (not pixelframe.process()):
        pixelframe.print_help()
